import typing

from tronpy.async_tron import AsyncTron, AsyncHTTPProvider

from src.utils import TronUtils
from src.types import TAddress
from config import Config, decimals

class NodeTron:
    # Provider config
    PROVIDER = AsyncHTTPProvider(Config.NODE_URL)
    NETWORK: str = "shasta" if Config.NETWORK == "TESTNET" else "mainnet"
    # Converts
    fromSun = staticmethod(TronUtils.from_sun)
    toSun = staticmethod(TronUtils.to_sun)

    def __init__(self):
        """
        Connect to Tron Node
        :param node_url: Node url
        :param network: Network | mainnet or shasta
        """
        self.node = AsyncTron(
            provider=NodeTron.PROVIDER if NodeTron.NETWORK == "mainnet" else None,
            network=NodeTron.NETWORK
        )

    async def get_energy(self, address: TAddress, energy: int) -> int:
        """If the user has enough energy."""
        account_resources = await self.node.get_account_resource(address)
        __energy = account_resources["EnergyLimit"] if "EnergyLimit" in account_resources else 0
        __energy_used = account_resources["EnergyUsed"] if "EnergyUsed" in account_resources else 0
        total_energy = __energy - __energy_used if __energy > 0 and __energy_used > 0 else 0
        if int(total_energy) <= 0:
            return energy
        elif energy - int(total_energy) <= 0:
            return 0
        else:
            return energy - int(total_energy)

    async def calculate_burn_energy(self, amount: int) -> typing.Union[float, int]:
        """
        Returns the amount of energy generated by burning TRX
        :param amount: Amount of TRX in sun
        :return:
        """
        energy_fee = 0
        parameters = await self.node.get_chain_parameters()
        for parameter in parameters:
            if parameter["key"] == "getEnergyFee":
                energy_fee = parameter["value"]
                break
        if float(energy_fee) == 0:
            return decimals.create_decimal(0)
        fee = (amount / energy_fee) * 1_000_000
        return decimals.create_decimal(fee)

    async def get_account_bandwidth(self, address: TAddress) -> typing.Dict:
        """
        Returns bandwidth data from account.
        :param address: Address of account
        """
        account_resources = await self.node.get_account_resource(address)
        free_bandwidth = account_resources["freeNetLimit"] if "freeNetLimit" in account_resources else 0
        free_bandwidth_used = account_resources["freeNetUsed"] if "freeNetUsed" in account_resources else 0
        total_bandwidth = free_bandwidth - free_bandwidth_used
        return {
            "freeBandwidth": free_bandwidth,
            "freeBandwidthUsed": free_bandwidth_used,
            "totalBandwidth": total_bandwidth
        }