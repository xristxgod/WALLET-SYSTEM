version: "3.9"

services:
  # <<<====================================>>> Module Bots <<<=======================================================>>>
  # Bot alert
  bot_alert:
    build:
      context: ./Bots/bot_alert
      dockerfile: Dockerfile
    container_name: bot_alert
    command: uvicorn app:app --host 0.0.0.0 --port 7000
    volumes:
      - ./files/logs/api/bot_alert:/home/app/files
    env_file:
      - .env.dev
    ports:
      - "7000:7000"
    expose:
      - 7000
    depends_on:
      - database
    networks:
      - telegram_bot_system
    logging:
      options:
        max-size: 100m
  # <<<====================================>>> Module DatabaseInterface <<<==========================================>>>
  # Database interface and Main Api
  database_interface:
    build:
      context: ./DatabaseInterface
      dockerfile: Dockerfile
    container_name: database_inteface
    command: python ./manage.py runserver 0.0.0.0:8000
    env_file:
      - .env.dev
    ports:
      - "8000:8000"
    expose:
      - 8000
    restart: always
    volumes:
      - ./files/logs/api/database_interface:/home/app/files
    depends_on:
      - database
    networks:
      - telegram_bot_system
  # Database
  database:
    container_name: database
    image: postgres:13.3
    env_file:
      - .env.dev
    ports:
      - "5432:5432"
    expose:
      - 5432
    networks:
      - telegram_bot_system
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U root -d telegram_bot_wallet" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: always
    volumes:
      - ./files/db:/var/lib/postgresql/data
    logging:
      options:
        max-size: 10m
        max-file: "3"
  # PgAdmin server
  pgAdmin:
    container_name: pgAdmin
    image: dpage/pgadmin4:5.7
    env_file:
      - .env.dev
    ports:
      - "5050:80"
    expose:
      - 80
    restart: always
    networks:
      - telegram_bot_system
  # <<<====================================>>> Module Finance <<<====================================================>>>
  # >>> Tron node:
  # Tron api
  tron_api:
    build:
      context: ./Finance/Tron/api
      dockerfile: Dockerfile
    container_name: tron_api
    command: uvicorn app:app --host 0.0.0.0 --port 5000
    volumes:
      - ./files/logs/api/tron:/home/app/files
    env_file:
      - .env.dev
    ports:
      - "5000:5000"
    expose:
      - 5000
    depends_on:
      - database
    networks:
      - telegram_bot_system
    logging:
      options:
        max-size: 100m
  # Tron demon
  tron_demon:
    build:
      context: ./Finance/Tron/demon
      dockerfile: Dockerfile
    container_name: tron_demon
    command: /usr/bin/supervisord
    volumes:
      - ./files/logs/demons/tron:/home/app/files
    env_file:
      - .env.dev
    depends_on:
      - database
    networks:
      - telegram_bot_system
    logging:
      options:
        max-size: 100m
networks:
  telegram_bot_system:
    driver: bridge
